#!/usr/bin/env ruby
# frozen_string_literal: true

# Laurent Martin/2017
$LOAD_PATH.unshift("#{File.dirname(__FILE__)}/../lib")
require 'aspera/agent/direct'
require 'aspera/cli/extended_value'
require 'aspera/ascp/installation'
require 'aspera/log'
require 'json'
# extended transfer spec parameter (only used in asession)
# Change log level
PARAM_LOG_LEVEL = 'loglevel'
# by default go to /tmp/username.filelist
PARAM_TMP_FILE_LIST_FOLDER = 'file_list_folder'
# place transfer spec in that
PARAM_SPEC = 'spec'
SAMPLE_DEMO = '"remote_host":"demo.asperasoft.com","remote_user":"asperaweb","ssh_port":33001,"remote_password":"demoaspera"'
SAMPLE_DEMO2 = '"direction":"receive","destination_root":"./test.dir"'
def assert_usage(assertion, error_message)
  return if assertion
  $stderr.puts('ERROR: '.red.blink + error_message) if error_message
  $stderr.puts('USAGE')
  $stderr.puts('    asession')
  $stderr.puts('    asession -h|--help')
  $stderr.puts('    asession <session spec extended value>')
  $stderr.puts('    ')
  $stderr.puts('    If no argument is provided, default will be used: @json:@stdin')
  $stderr.puts('    -h, --help display this message')
  $stderr.puts('    <session spec extended value> a dictionary value (Hash)')
  $stderr.puts('    The value can be either:')
  $stderr.puts("       the JSON description itself, e.g. @json:'{\"xx\":\"yy\",...}'")
  $stderr.puts('       @json:@stdin, if the JSON is provided from stdin')
  $stderr.puts('       @json:@file:<path>, if the JSON is provided from a file')
  $stderr.puts("    Parameter #{PARAM_SPEC} is mandatory, it contains the transfer spec")
  $stderr.puts('    Asynchronous commands can be provided on STDIN, examples:')
  $stderr.puts('       {"type":"START","source":"/aspera-test-dir-tiny/200KB.2"}')
  $stderr.puts('       {"type":"START","source":"xx","destination":"yy"}')
  $stderr.puts('       {"type":"DONE"}')
  $stderr.puts(%Q(Note: debug information can be placed on STDERR, using the "#{PARAM_LOG_LEVEL}" parameter in session spec (debug=0)))
  $stderr.puts('EXAMPLES')
  $stderr.puts(%Q(    asession @json:'{"#{PARAM_SPEC}":{#{SAMPLE_DEMO},#{SAMPLE_DEMO2},"paths":[{"source":"/aspera-test-dir-tiny/200KB.1"}]}}'))
  $stderr.puts(%Q(    echo '{"#{PARAM_SPEC}":{"remote_host":...}}'|asession @json:@stdin))
  Process.exit(0)
end
Aspera::Ascp::Installation.instance.sdk_folder = File.join(Dir.home, '.aspera', 'sdk')

parameter_source_err_msg = ' (argument), did you specify: "@json:" ?'
# by default assume JSON input on stdin if no argument
if ARGV.empty?
  ARGV.push('@json:@stdin')
  parameter_source_err_msg = ' (JSON on stdin)'
end
# anyway expect only one argument: session information
assert_usage(ARGV.length.eql?(1), 'exactly one argument is expected')
assert_usage(!['-h', '--help'].include?(ARGV.first), nil)
# parse transfer spec
begin
  session_argument = ARGV.pop
  session_spec = Aspera::Cli::ExtendedValue.instance.evaluate(session_argument)
rescue
  assert_usage(false, "Cannot parse argument: #{session_argument}")
end
# ensure right type
assert_usage(session_spec.is_a?(Hash), "The value must be a hash table#{parameter_source_err_msg}")
assert_usage(session_spec[PARAM_SPEC].is_a?(Hash), "the value must contain key #{PARAM_SPEC}")
# additional debug capability
if session_spec.key?(PARAM_LOG_LEVEL)
  Aspera::Log.instance.level = session_spec[PARAM_LOG_LEVEL]
end
# possibly override temp folder
if session_spec.key?(PARAM_TMP_FILE_LIST_FOLDER)
  Aspera::Transfer::Parameters.file_list_folder = session_spec[PARAM_TMP_FILE_LIST_FOLDER]
end
session_spec['agent'] = {} unless session_spec.key?('agent')
session_spec['agent']['quiet'] = true
session_spec['agent']['management_cb'] = ->(event) do
  puts JSON.generate(Aspera::Ascp::Management.enhanced_event_format(event))
end
# get local agent (ascp), disable ascp output on stdout to not mix with JSON events
client = Aspera::Agent::Direct.new(**session_spec['agent'].symbolize_keys)
# start transfer (asynchronous)
job_id = client.start_transfer(session_spec[PARAM_SPEC])
# async commands
Thread.new do
  # we assume here a single session
  session_id = client.sessions_by_job(job_id).first
  begin # rubocop:disable Style/RedundantBegin
    loop do
      data = JSON.parse($stdin.gets)
      client.send_command(session_id, data)
    end
  rescue
    Process.exit(1)
  end
end
# no exit code: status is success (0)
client.wait_for_transfers_completion
client.shutdown
