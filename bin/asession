#!/usr/bin/env ruby
# Laurent Martin/2017
$LOAD_PATH.unshift(File.dirname(__FILE__)+"/../lib")
require 'asperalm/fasp/local'
require 'asperalm/cli/listener/line_dump'
require 'asperalm/cli/extended_value' # parse

require 'asperalm/log'
require 'json'

TS_LOGLEVEL='EX_loglevel'

def assert_usage(assertion,errmsg)
  return if assertion
  STDERR.puts('ERROR: '+errmsg) if errmsg
  STDERR.puts('USAGE')
  STDERR.puts('    asession <zero or one argument>')
  STDERR.puts('    ')
  STDERR.puts('    If no argument is provided, default will be used: @json:@stdin, else:')
  STDERR.puts('       -h or --help to display this message')
  STDERR.puts('       a JSON value for transfer_spec, using the prefix: @json:')
  STDERR.puts('    The value can be either:')
  STDERR.puts("       the JSON description itself, e.g. @json:'{\"xx\":\"yy\",...}'")
  STDERR.puts('       @json:@stdin, if the JSON is provided from stdin')
  STDERR.puts('       @json:@file:<path>, if the JSON is provided from a file')
  STDERR.puts('    Asynchronous commands can be provided on STDIN, examples:')
  STDERR.puts('       {"type":"START","source":"/aspera-test-dir-tiny/200KB.2"}')
  STDERR.puts('       {"type":"START","source":"xx","destination":"yy"}')
  STDERR.puts('       {"type":"DONE"}')
  STDERR.puts('Note: debug information can be placed on STDERR, using the "'+TS_LOGLEVEL+'" parameter in transfer spec (debug=0)')
  STDERR.puts('EXAMPLES')
  STDERR.puts(%q(    asession @json:'{"remote_host":"demo.asperasoft.com","remote_user":"asperaweb","ssh_port":33001,"remote_password":"demoaspera","direction":"receive","destination_root":"./test.dir","paths":[{"source":"/aspera-test-dir-tiny/200KB.1"}]}'))
  STDERR.puts(%q(    echo '{"remote_host":...}'|asession @json:@stdin))
  Process.exit(1)
end

parameter_source_err_msg=' (argument), did you specify: "@json:" ?'
# by default assume JSON input on stdin if no argument
if ARGV.empty?
  ARGV.push('@json:@stdin')
  parameter_source_err_msg=' (JSON on stdin)'
end
# anyway expect only one argument: session information
assert_usage(ARGV.length.eql?(1),'exactly one argument is expected')
assert_usage(!['-h','--help'].include?(ARGV.first),nil)
# parse transfer spec
transfer_spec=Asperalm::Cli::ExtendedValue.parse("transfer spec",ARGV.pop)
# ensure right type
assert_usage(transfer_spec.is_a?(Hash),"the value must be a hash table#{parameter_source_err_msg}")
# additional debug capability
if transfer_spec.has_key?(TS_LOGLEVEL)
  Asperalm::Log.instance.level=transfer_spec[TS_LOGLEVEL]
  transfer_spec.delete(TS_LOGLEVEL)
end

client=Asperalm::Fasp::Local.instance
# disable ascp output on stdout to not mix with progress JSON
client.quiet=true
# display JSON instead of legacy Lines
client.add_listener(Asperalm::Cli::Listener::LineDump.new)
# go !
job_id=client.start_transfer(transfer_spec)
# async commands
Thread.new do
  begin
    loop do
      data=JSON.parse(STDIN.gets)
      client.send_command(job_id,0,data)
    end
  rescue
    Process.exit(1)
  end
end
# no exit code: status is success (0)
client.wait_for_transfers_completion
client.shutdown

